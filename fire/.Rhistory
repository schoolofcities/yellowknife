plot(1,1)
install.packages("tidyverse")
library(tidyverse)
install.packages("cancensus")
library(cancensus)
options(cancensus.api_key='CensusMapper_21ef59775d5e51cb80d5d0365a6311a2')
options(cancensus.cache_path = <your long term cache path>)
census_data <- get_census(dataset='CA21', regions=list(CSD=c("4806001","4704050","4605056")), vectors=c("v_CA21_6"), labels="detailed", geo_format=NA, level='CT')
install.packages("sf")
install.packages("units")
install.packages("units")
install.packages("sf")
install.packages("sd")
install.packages("rgdal")
install.packages("rgdal")
install.packages("rgdal")
votescor <- read.csv("Downloads/toronto_election_blog/mayor_correlations.csv")
ggcorrplot(votescor,
p.mat = votescor.sig$p,
method = "square",
lab = FALSE,
lab_size = 1,
tl.col = "black",
tl.cex = 8,
tl.srt = 90,
show.diag = FALSE,
colors = c("red2","white","blue2"),
hc.order = TRUE,
hc.method = "complete",
sig.level = 1-.001,
digits = 1,
insig = "blank",
outline.color = NA,
type = "upper") +
labs(title = "Mayoral vote share correlations",
subtitle = "Red means the candidates are *less* like each other;\nBlue means they are *more* like each other.",
caption = "Clustered by similarity.")
library(ggcorrplot)
ggcorrplot(votescor,
p.mat = votescor.sig$p,
method = "square",
lab = FALSE,
lab_size = 1,
tl.col = "black",
tl.cex = 8,
tl.srt = 90,
show.diag = FALSE,
colors = c("red2","white","blue2"),
hc.order = TRUE,
hc.method = "complete",
sig.level = 1-.001,
digits = 1,
insig = "blank",
outline.color = NA,
type = "upper") +
labs(title = "Mayoral vote share correlations",
subtitle = "Red means the candidates are *less* like each other;\nBlue means they are *more* like each other.",
caption = "Clustered by similarity.")
ggcorrplot(votescor,
method = "square",
lab = FALSE,
lab_size = 1,
tl.col = "black",
tl.cex = 8,
tl.srt = 90,
show.diag = FALSE,
colors = c("red2","white","blue2"),
hc.order = TRUE,
hc.method = "complete",
sig.level = 1-.001,
digits = 1,
insig = "blank",
outline.color = NA,
type = "upper") +
labs(title = "Mayoral vote share correlations",
subtitle = "Red means the candidates are *less* like each other;\nBlue means they are *more* like each other.",
caption = "Clustered by similarity.")
ggcorrplot(votescor,
method = "square",
lab = FALSE,
lab_size = 1,
tl.col = "black",
tl.cex = 8,
tl.srt = 90,
show.diag = FALSE,
colors = c("red2","white","blue2"),
hc.order = FALSE,
hc.method = "complete",
sig.level = 1-.001,
digits = 1,
insig = "blank",
outline.color = NA,
type = "upper") +
labs(title = "Mayoral vote share correlations",
subtitle = "Red means the candidates are *less* like each other;\nBlue means they are *more* like each other.",
caption = "Clustered by similarity.")
ggcorrplot(votescor,
method = "square",
lab = FALSE,
lab_size = 1,
tl.col = "black",
tl.cex = 8,
tl.srt = 90,
show.diag = FALSE,
colors = c("red2","white","blue2"),
hc.order = TRUE,
hc.method = "complete",
sig.level = 1-.001,
digits = 1,
insig = "blank",
outline.color = NA,
type = "upper") +
labs(title = "Mayoral vote share correlations",
subtitle = "Red means the candidates are *less* like each other;\nBlue means they are *more* like each other.",
caption = "Clustered by similarity.")
install.packages("sf")
install.packages("rgdal")
data(anscombe)
View(anscombe)
install.packages("datasauRus")
datasaurus_dozen
library("datasauRus")
datasaurus_dozen
filter(datasaurus_dozen, dataset="dino")
filter(datasaurus_dozen, dataset == "dino")
df <- datasaurus_dozen
filter(df, dataset == "dino")
df %>% filter(dataset == "dino")
library(tidyverse)
df %>% filter(dataset == "dino")
dino <- df %>% filter(dataset == "dino")
View(dino)
install.packages(c('tidyverse', 'tidycensus', 'readxl'))
library(tidyverse)
library(tidycensus)
lapply(c('tidyverse', 'tidycensus', 'readxl'), require, character.only = TRUE)
census_api_key('4cd4970be7399786743a9c8ffd928495d7e8445d')
vars_acs5_19 <- load_variables(2019, "acs5")
# View(vars_acs5_19)
vars_acs5_19 <- load_variables(2019, "acs5")
View(vars_acs5_19)
var_list <- c(
'med_inc' = 'B19013_001',  # Median household income
# GROSS RENT AS A PERCENTAGE OF HOUSEHOLD INCOME IN THE PAST 12 MONTHS:
'rb_total' = 'B25070_001', # Total
'rb_30_35' = 'B25070_007', # 30.0 to 34.9 percent
'rb_35_40' = 'B25070_008', # 35.0 to 39.9 percent
'rb_40_50' = 'B25070_009', # 40.0 to 49.9 percent
'rb_50' = 'B25070_010'     # 50.0 percent or more
)
tract_acs <- get_acs(
geography = "tract",      # tract-level
variables = var_list,     # pull variables defined above
year = 2019,              # 2015-2019
survey = "acs5",          # 5-year ACS
state = "MA",             # Massachusetts
county = "Worcester",     # Worcester County
geometry = FALSE,         # do NOT download spatial data (yet!)
output = "wide"           # try switching to 'tidy' and see what happens
) %>%
data.frame()              # convert from tibble to dataframe
View(tract_acs)
tract_acs <- get_acs(
geography = "tract",      # tract-level
variables = var_list,     # pull variables defined above
year = 2019,              # 2015-2019
survey = "acs5",          # 5-year ACS
state = "MA",             # Massachusetts
county = "Worcester",     # Worcester County
geometry = FALSE,         # do NOT download spatial data (yet!)
output = "tidy"           # try switching to 'tidy' and see what happens
) %>%
data.frame()              # convert from tibble to dataframe
View(tract_acs)
tract_acs <- get_acs(
geography = "tract",      # tract-level
variables = var_list,     # pull variables defined above
year = 2019,              # 2015-2019
survey = "acs5",          # 5-year ACS
state = "MA",             # Massachusetts
county = "Worcester",     # Worcester County
geometry = FALSE,         # do NOT download spatial data (yet!)
output = "wide"           # try switching to 'tidy' and see what happens
) %>%
data.frame()              # convert from tibble to dataframe
head(tract_acs)
glimpse(tract_acs)
tract_agg <- tract_acs %>%
mutate( # 'mutate' is used for creating new variables
rb30E = rb_30_35E + rb_35_40E + rb_40_50E + rb_50E, # new estimate
rb30M = sqrt((rb_30_35M^2) + (rb_35_40M^2) + (rb_40_50M^2) + (rb_50M^2)) # new MOE
) %>%
# Only keep relevant variables
dplyr::select(GEOID, med_incE, med_incM, rb_totalE, rb_totalM, rb30E, rb30M)
head(tract_agg) # Look at the new dataframe
moe_share <- tract_agg %>% # note: I keep creating new dataframes with new names
mutate(
med_inc_good = case_when(
med_incM/med_incE <= .4 ~ 'yes',
TRUE ~ 'no'
),
rb_total_good = case_when(
rb_totalM/rb_totalE <= .4 ~ 'yes',
TRUE ~ 'no'
),
rb30_good = case_when(
rb30M/rb30E <= .4 ~ 'yes',
TRUE ~ 'no'
)
)
head(moe_share)
table(moe_share$med_inc_good)
table(moe_share$rb_total_good)
table(moe_share$rb30_good)
reliable <- moe_share %>%
mutate(
med_inc = case_when(
med_inc_good == 'yes' ~ med_incE,
TRUE ~ NA
),
rb30_perc = case_when(
rb_total_good == 'yes' & rb30_good == 'yes' ~ rb30E/rb_totalE,
TRUE ~ NA
)
) %>%
dplyr::select(GEOID, med_inc, rb30_perc)
head(reliable)
reliable %>% filter(GEOID == '25027731800')
mean(reliable$med_inc, na.rm = T)
mean(reliable$rb30_perc, na.rm = T)
d09 <- get_acs(
geography = "tract",      # tract-level
variables = var_list,     # pull variables defined above
year = 2009,              # 2005-2009
survey = "acs5",          # 5-year ACS
state = "MA",             # Massachusetts
county = "Worcester",     # Worcester County
geometry = FALSE,         # do NOT download spatial data (yet!)
output = "wide"           # wide format, like before
) %>%
data.frame()              # convert from tibble to dataframe
head(d09)
d09 <- get_acs(
geography = "tract",      # tract-level
variables = var_list,     # pull variables defined above
year = 2009,              # 2005-2009
survey = "acs5",          # 5-year ACS
state = "MA",             # Massachusetts
county = "Worcester",     # Worcester County
geometry = FALSE,         # do NOT download spatial data (yet!)
output = "wide"           # wide format, like before
) %>%
data.frame()              # convert from tibble to dataframe
# head(d09)
d09_agg <- d09 %>%
mutate(
rb30E = rb_30_35E + rb_35_40E + rb_40_50E + rb_50E, # new estimate
rb30M = sqrt((rb_30_35M^2) + (rb_35_40M^2) + (rb_40_50M^2) + (rb_50M^2)) # new MOE
) %>%
dplyr::select(GEOID, med_incE, med_incM, rb_totalE, rb_totalM, rb30E, rb30M)
head(d09_agg)
moe_share_09 <- d09_agg %>%
mutate(
med_inc_good = case_when(
med_incM/med_incE <= .4 ~ 'yes',
TRUE ~ 'no'
),
rb_total_good = case_when(
rb_totalM/rb_totalE <= .4 ~ 'yes',
TRUE ~ 'no'
),
rb30_good = case_when(
rb30M/rb30E <= .4 ~ 'yes',
TRUE ~ 'no'
)
)
head(moe_share_09)
reliable_09 <- moe_share_09 %>%
mutate(
med_inc = case_when(
med_inc_good == 'yes' ~ med_incE,
TRUE ~ NA
),
rb30_perc = case_when(
rb_total_good == 'yes' & rb30_good == 'yes' ~ rb30E/rb_totalE,
TRUE ~ NA
)
) %>%
dplyr::select(GEOID, med_inc, rb30_perc)
head(reliable_09)
d09_long <- reliable_09 %>%
pivot_longer(
cols = !GEOID,
names_to = 'variable',
values_to = 'estimate'
) %>%
filter(!is.na(estimate)) %>% # filter out NA estimates
data.frame() # turns data from a 'tibble' back to a dataframe
head(d09_long)
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path) # current folder
cw <- read.csv(paste0(this_dir, '/crosswalk_2000_2010.csv')) %>%
mutate(trtid00 = as.character(trtid00), trtid10 = as.character(trtid10)) %>%
# Filter to tracts that were in Worcester County *either* in 2000 or 2010
filter(substr(trtid00, 1, 5) == '25027' |
substr(trtid10, 1, 5) == '25027')
head(cw)
# Weighted sums for non-median values
temp09 <-
cw %>%
# join to 2005-09 tract data on the GEOID from the 2000s, filtered to only
# variables that do NOT start with 'med'
inner_join(d09_long %>% filter(!str_detect(variable, "^med_")),
by = c("trtid00" = "GEOID")) %>%
# weight the 2005-09 estimates, group by GEOID from the 2010s and sum these
# weighted estimates
mutate(estimate = estimate * weight) %>%
dplyr::group_by(trtid10, variable) %>%
dplyr::summarise(estimate = sum(estimate, na.rm = T)) %>%
dplyr::rename(GEOID = trtid10) %>% # want data in terms of GEOIDs from 2010s
data.frame()
head(temp09)
# Calculate adjusted weights that equal the proportion of the sum of all weights
# for the 2010s GEOID, to create more accurate median estimates
cw_new <-
cw %>%
dplyr::group_by(trtid10) %>%
mutate(sum = sum(weight)) %>%
mutate(adjusted_weight = weight/sum) %>%
dplyr::rename(GEOID = trtid10) %>%
data.frame()
head(cw_new)
# Weighted averages for median values (using adjusted weights created above)
temp_meds09 <-
cw_new %>%
# join to 2005-09 tract data on the GEOID from the 2000s, filtered to only
# variables that DO start with 'med'
inner_join(d09_long %>% filter(str_detect(variable, "^med_")),
by = c("trtid00" = "GEOID")) %>%
mutate(adjusted_estimate = estimate * adjusted_weight) %>%
dplyr::group_by(GEOID, variable) %>%
dplyr::summarise(estimate = sum(adjusted_estimate)) %>%
data.frame()
head(temp_meds09)
d09_cw <-
rbind(temp09, temp_meds09) %>% # stack the datasets together
pivot_wider( # make data wide, not long
names_from = 'variable',
values_from = 'estimate'
) %>%
mutate(rb30_perc_09 = round(rb30_perc, 3), # round to 3 digits
med_inc_09 = round(med_inc, 0)) %>% # round to nearest integer
dplyr::select(-c(rb30_perc, med_inc)) %>% # keep only relevant variables
data.frame()
head(d09_cw)
head(reliable)
d_09_19 <- d09_cw %>%
inner_join(reliable %>% rename(med_inc_19 = med_inc, rb30_perc_19 = rb30_perc))
head(d_09_19)
cpi <- read_excel(paste0(this_dir, '/r-cpi-u-rs-allitems.xlsx'), skip = 5) %>%
filter(YEAR %in% c(2009, 2019)) %>%
dplyr::select(YEAR, AVG) %>%
data.frame()
cpi
infl_adj <- d_09_19 %>%
mutate(med_inc_09_adj = (375.8/314.7)*med_inc_09) %>%
dplyr::select(-med_inc_09) # remove non-inflation-adjusted 2005-09 med income
head(infl_adj)
d_final <- infl_adj %>%
mutate(rb30_pc_change = rb30_perc_19 - rb30_perc_09,
med_inc_change = med_inc_19 - med_inc_09_adj)
head(d_final)
setwd("~/Dropbox/sofc/projects/yellowknife/fire")
library(tidyverse)
df <- read.csv("fire-area/fire-totals-canada-by-year.csv")
df
ggplot() +
geom_bar(aes(x = factor(YEAR), y = CANADA), stat = "identity")
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity")
head(df)
df <- head(df, 25)
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity")
df <- read.csv("fire-area/fire-totals-canada-by-year.csv")
df <- head(df, 50)
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity")
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_bw()
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal()
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1213))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 5))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 3))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 2))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 0, vjust = 2))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 2, vjust = 2))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 2, vjust = 3))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 3, vjust = 3))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 3))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1.5, vjust = 3))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1.75, vjust = 3))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1.75, vjust = 3.25))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1.75, vjust = 2.75))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1.85, vjust = 2.75))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1.6, vjust = 2.75))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1.6, vjust = 2.8))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1.6, vjust = 2.6))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA), stat = "identity") +
labs(x = "Year", y = "Area Burned") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1.6, vjust = 2.6))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA, fill = df$CANADA), stat = "identity") +
labs(x = "Year", y = "Area Burned") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1.6, vjust = 2.6))
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA, fill = df$CANADA), stat = "identity") +
labs(x = "Year", y = "Area Burned") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1.6, vjust = 2.6)) +
scale_fill_gradient(low = "white", high = "#DC4633")
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA, fill = df$CANADA), stat = "identity") +
labs(x = "Year", y = "Area Burned") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1.6, vjust = 2.6)) +
scale_fill_gradient(low = "#F1C500", high = "#DC4633")
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA, fill = df$CANADA), stat = "identity") +
labs(x = "Year", y = "Area Burned") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1.6, vjust = 2.6)) +
scale_fill_gradient(low = "#F1C500", high = "#DC4633")
df <- head(df, 30)
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA, fill = df$CANADA), stat = "identity") +
labs(x = "Year", y = "Area Burned") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1.6, vjust = 2.6)) +
scale_fill_gradient(low = "#F1C500", high = "#DC4633")
df <- head(df, 25)
ggplot() +
geom_bar(aes(x = factor(df$YEAR), y = df$CANADA, fill = df$CANADA), stat = "identity") +
labs(x = "Year", y = "Area Burned") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1.6, vjust = 2.6)) +
scale_fill_gradient(low = "#F1C500", high = "#DC4633")
View(df)
